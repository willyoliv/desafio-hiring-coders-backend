

declare namespace Utils {
  type tsObject = { [name: string]: string }
  type httpMethods = 'post' | 'put' | 'delete' | 'get' | 'patch'
  type Alerttypes = 'error' | 'warning' | 'success'
  export type init = 'graphqlInit' | 'graphqlFinish' | 'none'
  export type actionType = 'BeginHandleRequest' | 'EndHandleRequest' | 'BeginSubRequest' | 'EndSubRequest' | 'none'

  interface ErrorMap {
    [name: string]: Error | { [name: string]: Error }
  }

  interface Error {
    message: string
    type?: Alerttypes
  }

  interface Resolver {
    Query?: { [key: string]: any }
    Mutation?: { [key: string]: any }
    [key: string]: any
  }

  export function loggerMiddleware(splunkToken: string, resolver: Resolver): any
  export function makeApiCall (
    metricId: string,
    url: string,
    ctx: any,
    method: httpMethods,
    splunkToken: string,
    fieldName: string,
    payload?: any,
    adicionalHeaders?: tsObject,
    adicionalProps?: tsObject
  ): any
  export function getErrorCode (errorMap: ErrorMap, status: string | number, code?: string): Error
  export function metricLogger (
    id: string,
    ctx: tsObject,
    type: actionType,
    data: tsObject,
    TOKEN: string,
    fieldName: string
  ): any
  export function Logger(
    ctx: tsObject,
    request: tsObject,
    response: tsObject,
    TOKEN: string,
    type: init
  ): any
  export const Functions: any
  export function buildGraphQLError(message: string, code?: string, customFields?: any): void
}

declare module '@gocommerce/utils' {
  export = Utils
}

export * from './lib/globals'
