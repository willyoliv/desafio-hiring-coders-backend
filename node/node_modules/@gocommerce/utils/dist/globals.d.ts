export type AlertType = 'success' | 'error' | 'warning' | 'info'
export type openAlertType = (message: string, type: AlertType, isCloseActive: boolean) => void
export type setMutationError = (graphQlFields: string, errorPayload: object) => void
export type navigate = (navigateTypes: navigateTypes) => void
export type customEvent = Event & { target: HTMLInputElement | HTMLButtonElement | HTMLDivElement }

export interface errorMap {
  [name: string]: error | { [name: string]: error }
}

export interface ErrorMap {
  [name: string]: error | { [name: string]: error }
}

export interface error {
  message: string
  type?: AlertType
}

export interface navigateTypes {
  page?: string
  to?: string
  params?: { [name: string]: any }
  query?: string
}

export interface ErrorInterface {
  message: string
  showAlert: boolean
  [propName: string]: any
}

export interface graphQlMytation {
  mutate: Function
  errorPayload: ErrorInterface
}

export interface GraphQlError {
  message: string
  code: number
  showAlertMessage: boolean
}

export interface StoreCurrencyData {
  currencySymbol: string
  currencyFormatInfo: {
    currencyDecimalDigits: number
    currencyDecimalSeparator: string
    currencyGroupSeparator: string
    currencyGroupSize: number
    startsWithCurrencySymbol: boolean
  }
}

export interface ConfigObjectToQueryString {
  field: string
  nameInUrl?: string
  format?: Function
  default?: string
}
