'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _splunkEvents = require('splunk-events');

var _splunkEvents2 = _interopRequireDefault(_splunkEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SPLUNK_ENDPOINT = 'splunk-heavyforwarder-public.vtex.com';
var splunkEvents = new _splunkEvents2.default();
var metricLogger = function metricLogger(id, ctx) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'none';
    var data = arguments[3];
    var TOKEN = arguments[4];
    var fieldName = arguments[5];

    var vtex = ctx.vtex;
    var headers = ctx.request.headers;
    var origin = headers['referer'];
    var host = headers['x-forwarded-host'];
    var level = 'Debug';
    var workflow_type = 'GCRequestTracing';
    var operationId = headers['x-operationid'] && headers['x-operationid'].split('|') || ('; , ' + headers.cookie).split('; , X-OperationId=').pop().split(';').shift();
    var caller = headers['x-vtex-caller'].split('@');
    var userAgent = vtex.userAgent.split('@');
    var event = (0, _extends4.default)({}, data, {
        resolverName: fieldName,
        requestid: id,
        origin: origin,
        userAgentcaller: caller && caller[0],
        app_version: caller && caller[1],
        vtexUserAgent: userAgent && userAgent[0],
        vtexApp_version: userAgent && userAgent[1],
        operationId: operationId && operationId[0],
        requestHops: operationId && parseInt(operationId[1]) + 1,
        workflow_instance: type,
        workspace: vtex.workspace
    });
    // fetcher to log events to splunk depends on colossus context
    function splunkCustomFetcher(context) {
        var headers = context.headers || {};
        return (0, _axios2.default)((0, _extends4.default)({}, context, {
            headers: (0, _extends4.default)({}, headers, (0, _defineProperty3.default)({
                'Proxy-Authorization': vtex.authToken,
                'X-Vtex-Proxy-To': 'https://' + SPLUNK_ENDPOINT + ':8088'
            }, 'X-OperationId', (operationId && operationId[0]) + '|' + (operationId && parseInt(operationId[1]) + 1)))
        }));
    }
    try {
        splunkEvents.config({
            endpoint: 'http://' + SPLUNK_ENDPOINT,
            request: splunkCustomFetcher,
            host: host,
            token: TOKEN,
            injectTimestamp: true
        });
        splunkEvents.logEvent(level, type, workflow_type, type, event, vtex.account);
    } catch (e) {
        console.error('Splunk Events Error: ' + e + ' ' + level + ' ' + type + ' ' + (event ? JSON.stringify(event) : 'No event data'));
    }
};
exports.default = metricLogger;