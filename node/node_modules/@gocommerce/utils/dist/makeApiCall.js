'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _metricLogger2 = require('./metricLogger');

var _metricLogger3 = _interopRequireDefault(_metricLogger2);

var _functions = require('./functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var makeApiCall = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(metricId, url, ctx, method, splunkToken, fieldName, payload) {
        var adicionalHeaders = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};
        var adicionalProps = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};

        var account, start_time, headers, operationId, urlWithoutHttps, isHttps, isGraphql, baseUrl, requestParams, _metricLogger;

        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        account = ctx.vtex.account || ctx.vtex.route.params.account;
                        start_time = new Date().getTime();
                        headers = ctx.request.headers;
                        operationId = headers['x-operationid'] && headers['x-operationid'].split('|');
                        urlWithoutHttps = url.startsWith('https') && url.replace('https', 'http') || url;
                        isHttps = !url.startsWith('http') || url.startsWith('https');
                        isGraphql = urlWithoutHttps.includes('/graphql');
                        baseUrl = 'http://api.gocommerce.com/';
                        requestParams = (0, _extends3.default)({
                            baseURL: '' + baseUrl + account,
                            url: urlWithoutHttps,
                            method: method,
                            data: payload,
                            withCredentials: true,
                            headers: (0, _extends3.default)({
                                'Proxy-Authorization': ctx.vtex.authToken,
                                'Cache-Control': 'public, max-age=3'
                            }, operationId && (0, _defineProperty3.default)({}, 'X-OperationId', operationId[0] + '|' + (parseInt(operationId[1]) + 1)), !isGraphql && { Cookie: ctx.request.header.cookie || '' }, (0, _functions.getSubset)(['referer', 'x-forwarded-for', 'x-forwarded-host'], ctx.request.header), isHttps && { 'X-Vtex-Use-Https': true }, adicionalHeaders)
                        }, adicionalProps);

                        _metricLogger = function _metricLogger(action, adicionalInformation) {
                            return (0, _metricLogger3.default)(metricId, ctx, action, (0, _extends3.default)({
                                requestUrl: requestParams.baseURL + requestParams.url,
                                method: requestParams.method,
                                api: url && url.split('/')[1] || 'admin'
                            }, adicionalInformation), splunkToken, fieldName);
                        };

                        _metricLogger('BeginSubRequest');
                        _context.next = 13;
                        return (0, _axios2.default)(requestParams).then(function (response) {
                            _metricLogger('EndSubRequest', {
                                wasError: 'false',
                                statusCode: response.status,
                                elapsed: (new Date().getTime() - start_time).toFixed(2)
                            });
                            (0, _logger2.default)(ctx, requestParams, response, splunkToken);
                            return response;
                        }).catch(function (e) {
                            console.log('e', e);
                            _metricLogger('EndSubRequest', {
                                wasError: 'true',
                                statusCode: e.response && e.response.status || 500,
                                elapse: new Date().getTime() - start_time
                            });
                            (0, _logger2.default)(ctx, requestParams, e.response || {}, splunkToken);
                            return { error: e.response };
                        });

                    case 13:
                        return _context.abrupt('return', _context.sent);

                    case 14:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }));

    return function makeApiCall(_x3, _x4, _x5, _x6, _x7, _x8, _x9) {
        return _ref.apply(this, arguments);
    };
}();
exports.default = makeApiCall;