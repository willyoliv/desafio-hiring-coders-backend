'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getStaticUrl = exports.isGoCommerceAcc = exports.objectToQueryString = exports.removeValueInArray = exports.swapValueInArray = exports.objectToLogger = exports.flatter = exports.getSubset = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends4 = require('babel-runtime/helpers/extends');

var _extends5 = _interopRequireDefault(_extends4);

exports.isObject = isObject;
exports.isObjectEmpty = isObjectEmpty;
exports.mergeDeep = mergeDeep;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * receive a object and a array of string, returns all keys of the first level that match in the array
 */
var getSubset = exports.getSubset = function getSubset(keys, obj) {
    return keys.reduce(function (a, c) {
        return !obj[c] ? a : (0, _extends5.default)({}, a, (0, _defineProperty3.default)({}, c, obj[c]));
    }, {});
};
/**
 * receive a object and put all its keys in the same level,
 *  {a:{b:{c:2}, d:5}} => {a-d:5, a-b-c:2}
 */
var flatter = exports.flatter = function flatter(object) {
    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    return object != null && Object.keys(object).reduce(function (prev, element) {
        return object[element] != null && isObject(object[element]) ? (0, _extends5.default)({}, prev, flatter(object[element], '' + prefix + element + '-')) : (0, _extends5.default)({}, prev, (0, _defineProperty3.default)({}, '' + prefix + element, object[element]));
    }, {});
};
/**
 * Adds  time (currentTime) ,type(Error),sourcetype(sourcetype) filds/keys to the objecto to be
 * better interpretated in Splunk Log
 */
var objectToLogger = exports.objectToLogger = function objectToLogger(apiData) {
    var sendObject = (0, _extends5.default)({
        time: +new Date(),
        type: 'Error',
        sourcetype: 'log'
    }, apiData);
    return Object.keys(sendObject).reduce(function (prev, element) {
        return prev + ' ' + element + '="' + sendObject[element] + '"';
    }, '').slice(1);
};
/**
 * Swap a value in a array
 * Return a new array
 */
var swapValueInArray = exports.swapValueInArray = function swapValueInArray(newValue, index, array) {
    return [].concat((0, _toConsumableArray3.default)(array.slice(0, index)), [newValue], (0, _toConsumableArray3.default)(array.slice(index + 1, array.length)));
};
/**
 * Remove a value in a array
 * Return a new array
 */
var removeValueInArray = exports.removeValueInArray = function removeValueInArray(index, array) {
    return [].concat((0, _toConsumableArray3.default)(array.slice(0, index)), (0, _toConsumableArray3.default)(array.slice(index + 1, array.length)));
};
/**
 * Return if a element is a object
 * Return boolean
 */
function isObject(item) {
    return item && (typeof item === 'undefined' ? 'undefined' : (0, _typeof3.default)(item)) === 'object' && !Array.isArray(item);
}
/**
 * Return if a element is empty
 * Return boolean
 */
function isObjectEmpty(item) {
    return Object.keys(item).length == 0;
}
/**
 * Take two object and merge them
 * Return a object
 */
function mergeDeep(target, source) {
    var output = Object.assign({}, target);
    if (isObject(target) && isObject(source)) {
        Object.keys(source).forEach(function (key) {
            if (isObject(source[key])) {
                if (!(key in target)) Object.assign(output, (0, _defineProperty3.default)({}, key, source[key]));else {
                    output[key] = mergeDeep(target[key], source[key]);
                }
            } else if (typeof source[key] === 'boolean') {
                if (typeof source[key] === 'boolean') {
                    Object.assign(output, (0, _defineProperty3.default)({}, key, !target[key]));
                }
            } else {
                Object.assign(output, (0, _defineProperty3.default)({}, key, source[key]));
            }
        });
    }
    return output;
}
var objectToQueryString = exports.objectToQueryString = function objectToQueryString(source, config) {
    var fields = config.filter(function (item) {
        return !!source[item.field];
    }).map(function (item) {
        var queryName = encodeURIComponent(item.nameInUrl ? item.nameInUrl : item.field);
        var queryValue = encodeURIComponent(item.format ? item.format(source[item.field]) : source[item.field]);
        return queryName + '=' + (queryValue || item.default);
    });
    return fields.join('&');
};
/**
 * Receive the account string or ctx
 * Return true if GoCommerce account
 */
var isGoCommerceAcc = exports.isGoCommerceAcc = function isGoCommerceAcc(data) {
    var account = '';
    if (typeof data === 'string') {
        account = data;
    } else {
        account = data.vtex && data.vtex.account;
    }
    return account.includes('gc_') || account.includes('gc-');
};
var getStaticUrl = exports.getStaticUrl = function getStaticUrl(ctx, type, fileName) {
    return 'https://static.gocommerce.com/' + ctx.vtex.account + '/assets/gocommerce/' + type + '/' + fileName;
};