export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  IOSanitizedString: any;
  IOUpload: any;
  Upload: any;
};



export type Mutation = {
  __typename?: 'Mutation';
  addPoints?: Maybe<PointsAdd>;
};


export type MutationAddPointsArgs = {
  email?: Maybe<Scalars['String']>;
  pontos?: Maybe<Scalars['Int']>;
};

export type PointsAdd = {
  __typename?: 'PointsAdd';
  email?: Maybe<Scalars['String']>;
  pontos?: Maybe<Scalars['Int']>;
};

export type PointsView = {
  __typename?: 'PointsView';
  email?: Maybe<Scalars['String']>;
  pontos?: Maybe<Scalars['Int']>;
};

export type Query = {
  __typename?: 'Query';
  pointsList?: Maybe<Array<Maybe<PointsView>>>;
};


export {}