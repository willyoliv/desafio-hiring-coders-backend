import { AppClient, InstanceOptions, IOContext } from '@vtex/api';
import { Brand, CategoryByIdResponse, CategoryTreeResponse, FieldResponseAPI, FilterListTreeCategoryById, SearchArgs, SearchAutocompleteUnit, SearchFacets, SearchProduct } from '../typings/search';
import { SearchCrossSellingTypes } from '../utils/search';
interface AutocompleteArgs {
    maxRows: number | string;
    searchTerm: string;
}
interface SearchPageTypeResponse {
    id: string;
    pageType: string;
    name: string;
    url: string;
    title: string | null;
    metaTagDescription: string | null;
}
/** Search API
 * Docs: https://documenter.getpostman.com/view/845/catalogsystem-102/Hs44
 */
export declare class Search extends AppClient {
    private searchEncodeURI;
    private basePath;
    private addSalesChannel;
    private addCompleteSpecifications;
    constructor(ctx: IOContext, opts?: InstanceOptions);
    pageType: (path: string, query?: string) => Promise<SearchPageTypeResponse>;
    product: (slug: string) => Promise<SearchProduct[]>;
    productByEan: (id: string) => Promise<SearchProduct[]>;
    productsByEan: (ids: string[], salesChannel?: string | number | undefined) => Promise<SearchProduct[]>;
    productById: (id: string, cacheable?: boolean) => Promise<SearchProduct[]>;
    productsById: (ids: string[], salesChannel?: string | number | undefined) => Promise<SearchProduct[]>;
    productByReference: (id: string) => Promise<SearchProduct[]>;
    productsByReference: (ids: string[], salesChannel?: string | number | undefined) => Promise<SearchProduct[]>;
    productBySku: (skuId: string) => Promise<SearchProduct[]>;
    productsBySku: (skuIds: string[], salesChannel?: string | number | undefined) => Promise<SearchProduct[]>;
    productsRaw: (args: SearchArgs) => Promise<import("@vtex/api").IOResponse<SearchProduct[]>>;
    products: (args: SearchArgs) => Promise<SearchProduct[]>;
    productsQuantity: (args: SearchArgs) => Promise<number>;
    brands: () => Promise<Brand[]>;
    brand: (id: number) => Promise<Brand[]>;
    categories: (treeLevel: number) => Promise<CategoryTreeResponse[]>;
    getCategoryChildren: (id: number) => Promise<Record<string, string>>;
    facets: (facets?: string) => Promise<SearchFacets>;
    category: (id: string | number) => Promise<CategoryByIdResponse>;
    crossSelling: (id: string, type: SearchCrossSellingTypes) => Promise<SearchProduct[]>;
    filtersInCategoryFromId: (id: string | number) => Promise<FilterListTreeCategoryById[]>;
    autocomplete: ({ maxRows, searchTerm }: AutocompleteArgs) => Promise<{
        itemsReturned: SearchAutocompleteUnit[];
    }>;
    private get;
    getField: (id: number) => Promise<FieldResponseAPI>;
    private getRaw;
    private productSearchUrl;
}
export {};
