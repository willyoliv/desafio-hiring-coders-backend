import { InstanceOptions, IOContext, JanusClient, RequestTracingConfig } from '@vtex/api';
import { OrderForm, OrderFormClientPreferencesData, AuthMethod, OrderFormConfiguration, SimulationOrderForm, SimulationPayload, SingleCustomData, OrderFormPayment, CheckoutAddress } from '../typings';
export declare class Checkout extends JanusClient {
    constructor(ctx: IOContext, options?: InstanceOptions);
    getOrderFormConfiguration(authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<OrderFormConfiguration>;
    setOrderFormConfiguration(body: OrderFormConfiguration, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    setSingleCustomData(orderFormId: string, customData: SingleCustomData, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    addItem(orderFormId: string, items: any, queryString?: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<OrderForm>;
    cancelOrder(orderFormId: string, reason: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    setOrderFormCustomData(orderFormId: string, appId: string, field: string, value: any, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    updateItems(orderFormId: string, orderItems: any, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    updateOrderFormPayment(orderFormId: string, payments: OrderFormPayment[], authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    updateOrderFormProfile(orderFormId: string, fields: Record<string, string | boolean>, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    updateOrderFormShipping(orderFormId: string, shippingAddress: CheckoutAddress, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): void;
    updateOrderFormMarketingData(orderFormId: string, marketingData: any, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    updateOrderFormClientPreferencesData(orderFormId: string, clientPreferencesData: OrderFormClientPreferencesData, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    addAssemblyOptions(orderFormId: string, itemId: string | number, assemblyOptionsId: string, body: any, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<OrderForm>;
    removeAssemblyOptions(orderFormId: string, itemId: string | number, assemblyOptionsId: string, body: any, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<import("@vtex/api").IOResponse<OrderForm>>;
    updateOrderFormCheckin(orderFormId: string, checkinPayload: any, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    orderForm(orderFormId?: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<OrderForm>;
    orderFormRaw(authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<OrderForm>;
    newOrderForm(orderFormId?: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    orders(authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<any>;
    simulation(simulation: SimulationPayload, queryString?: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<SimulationOrderForm>;
    updateOrderFormIgnoreProfile(orderFormId: string, ignoreProfileData: boolean, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
}
