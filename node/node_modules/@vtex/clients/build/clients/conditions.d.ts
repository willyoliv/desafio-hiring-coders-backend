import { JanusClient } from '@vtex/api';
import type { RequestTracingConfig, InstanceOptions, IOContext } from '@vtex/api';
import type { Condition, EvaluationsResponse, ListConditionsResponse } from '../typings/conditions';
import type { AuthMethod } from '../typings';
export declare class Conditions extends JanusClient {
    constructor(ctx: IOContext, options?: InstanceOptions);
    getAllConditionsPerType(type: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<ListConditionsResponse>;
    getConditionById(type: string, id: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<Condition>;
    deleteConditionById(type: string, id: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<import("@vtex/api").IOResponse<void>>;
    saveCondition(type: string, condition: Record<string, any>, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<Condition>;
    doEvaluation(type: string, subject: Record<string, any>, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<EvaluationsResponse>;
    private get routes();
}
