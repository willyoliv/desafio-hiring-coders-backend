"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Search = void 0;
const api_1 = require("@vtex/api");
const qs_1 = require("qs");
const search_1 = require("../utils/search");
// eslint-disable-next-line no-restricted-syntax
var SimulationBehavior;
(function (SimulationBehavior) {
    SimulationBehavior["SKIP"] = "skip";
    SimulationBehavior["DEFAULT"] = "default";
})(SimulationBehavior || (SimulationBehavior = {}));
const inflightKey = ({ baseURL, url, params, headers }) => {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    return `${baseURL}${url}${qs_1.stringify(params, {
        arrayFormat: 'repeat',
        addQueryPrefix: true,
    })}&segmentToken=${headers['x-vtex-segment']}`;
};
/** Search API
 * Docs: https://documenter.getpostman.com/view/845/catalogsystem-102/Hs44
 */
class Search extends api_1.AppClient {
    constructor(ctx, opts) {
        super('vtex.catalog-api-proxy@0.x', ctx, opts);
        this.addSalesChannel = (url, salesChannel) => {
            if (!salesChannel) {
                return url;
            }
            return url.concat(`&sc=${salesChannel}`);
        };
        this.addCompleteSpecifications = (url) => {
            if (!url.includes('?')) {
                return `${url}?compSpecs=true`;
            }
            return `${url}&compSpecs=true`;
        };
        this.pageType = (path, query = '') => {
            const pageTypePath = path.startsWith('/') ? path.substr(1) : path;
            const pageTypeQuery = !query || query.startsWith('?') ? query : `?${query}`;
            return this.get(`/pub/portal/pagetype/${pageTypePath}${pageTypeQuery}`, { metric: 'search-pagetype' });
        };
        this.product = (slug) => this.get(this.addCompleteSpecifications(`/pub/products/search/${this.searchEncodeURI(slug === null || slug === void 0 ? void 0 : slug.toLowerCase())}/p`), { metric: 'search-product' });
        this.productByEan = (id) => this.get(this.addCompleteSpecifications(`/pub/products/search?fq=alternateIds_Ean:${id}`), {
            metric: 'search-productByEan',
        });
        this.productsByEan = (ids, salesChannel) => this.get(this.addCompleteSpecifications(this.addSalesChannel(`/pub/products/search?${ids
            .map((id) => `fq=alternateIds_Ean:${id}`)
            .join('&')}`, salesChannel)), { metric: 'search-productByEan' });
        this.productById = (id, cacheable = true) => {
            const isVtex = this.context.platform === 'vtex';
            const url = isVtex
                ? this.addCompleteSpecifications(`/pub/products/search?fq=productId:${id}`)
                : `/products/${id}`;
            return this.get(url, {
                metric: 'search-productById',
                ...(cacheable ? {} : { cacheable: api_1.CacheType.None }),
            });
        };
        this.productsById = (ids, salesChannel) => this.get(this.addCompleteSpecifications(this.addSalesChannel(`/pub/products/search?${ids
            .map((id) => `fq=productId:${id}`)
            .join('&')}`, salesChannel)), { metric: 'search-productById' });
        this.productByReference = (id) => this.get(this.addCompleteSpecifications(`/pub/products/search?fq=alternateIds_RefId:${id}`), {
            metric: 'search-productByReference',
        });
        this.productsByReference = (ids, salesChannel) => this.get(this.addCompleteSpecifications(this.addSalesChannel(`/pub/products/search?${ids
            .map((id) => `fq=alternateIds_RefId:${id}`)
            .join('&')}`, salesChannel)), { metric: 'search-productByReference' });
        this.productBySku = (skuId) => this.get(this.addCompleteSpecifications(`/pub/products/search?fq=skuId:${skuId}`), {
            metric: 'search-productBySku',
        });
        this.productsBySku = (skuIds, salesChannel) => this.get(this.addCompleteSpecifications(this.addSalesChannel(`/pub/products/search?${skuIds
            .map((skuId) => `fq=skuId:${skuId}`)
            .join('&')}`, salesChannel)), { metric: 'search-productsBySku' });
        this.productsRaw = (args) => {
            return this.getRaw(this.productSearchUrl(args), {
                metric: 'search-products',
            });
        };
        this.products = (args) => {
            return this.get(this.productSearchUrl(args), {
                metric: 'search-products',
            });
        };
        this.productsQuantity = async (args) => {
            const { headers: { resources }, } = await this.getRaw(this.productSearchUrl(args));
            const [, quantity] = resources.split('/');
            return parseInt(quantity, 10);
        };
        this.brands = () => this.get('/pub/brand/list', { metric: 'search-brands' });
        this.brand = (id) => this.get(`/pub/brand/${id}`, { metric: 'search-brands' });
        this.categories = (treeLevel) => this.get(`/pub/category/tree/${treeLevel}/`, {
            metric: 'search-categories',
        });
        this.getCategoryChildren = (id) => this.get(`/pub/category/categories/children?id=${id}`, {
            metric: 'search-category-children',
        });
        this.facets = (facets = '') => {
            const [path, options] = decodeURI(facets).split('?');
            return this.get(`/pub/facets/search/${encodeURI(this.searchEncodeURI(`${path.trim()}${options ? `?${options}` : ''}`))}`, { metric: 'search-facets' });
        };
        this.category = (id) => this.get(`/pub/category/${id}`, {
            metric: 'search-category',
        });
        this.crossSelling = (id, type) => this.get(`/pub/products/crossselling/${type}/${id}?groupByProduct=true`, {
            metric: 'search-crossSelling',
        });
        this.filtersInCategoryFromId = (id) => this.get(`/pub/specification/field/listTreeByCategoryId/${id}`, {
            metric: 'search-listTreeByCategoryId',
        });
        this.autocomplete = ({ maxRows, searchTerm }) => this.get(`/buscaautocomplete?maxRows=${maxRows}&productNameContains=${encodeURIComponent(this.searchEncodeURI(searchTerm))}`, { metric: 'search-autocomplete' });
        this.get = (url, config = {}) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const segmentData = this
                .context.segment;
            const { channel: salesChannel = '' } = segmentData !== null && segmentData !== void 0 ? segmentData : {};
            config.params = {
                ...config.params,
                ...(!!salesChannel && { sc: salesChannel }),
            };
            config.inflightKey = inflightKey;
            return this.http.get(`${this.basePath}${url}`, config);
        };
        this.getField = (id) => this.get(`/pub/specification/fieldGet/${id}`, {
            metric: 'catalog-get-field-by-id',
        });
        this.getRaw = (url, config = {}) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const segmentData = this
                .context.segment;
            const { channel: salesChannel = '' } = segmentData !== null && segmentData !== void 0 ? segmentData : {};
            config.params = {
                ...config.params,
                ...(!!salesChannel && { sc: salesChannel }),
            };
            config.inflightKey = inflightKey;
            return this.http.getRaw(`${this.basePath}${url}`, config);
        };
        this.productSearchUrl = ({ query = '', category = '', specificationFilters, priceRange = '', collection = '', salesChannel = '', orderBy = '', from = 0, to = 9, map = '', hideUnavailableItems = false, simulationBehavior = SimulationBehavior.DEFAULT, completeSpecifications = true, }) => {
            var _a;
            const sanitizedQuery = encodeURIComponent(this.searchEncodeURI(decodeURIComponent(query || '').trim()));
            if (hideUnavailableItems) {
                const segmentData = this.context.segment;
                salesChannel = (_a = segmentData === null || segmentData === void 0 ? void 0 : segmentData.channel.toString()) !== null && _a !== void 0 ? _a : '';
            }
            let url = `/pub/products/search/${sanitizedQuery}?`;
            if (category && !query) {
                url += `&fq=C:/${category}/`;
            }
            if (specificationFilters && specificationFilters.length > 0) {
                url += specificationFilters.map((filter) => `&fq=${filter}`);
            }
            if (priceRange) {
                url += `&fq=P:[${priceRange}]`;
            }
            if (collection) {
                url += `&fq=productClusterIds:${collection}`;
            }
            if (salesChannel) {
                url += `&fq=isAvailablePerSalesChannel_${salesChannel}:1`;
            }
            if (orderBy) {
                url += `&O=${orderBy}`;
            }
            if (map) {
                url += `&map=${map}`;
            }
            if (from != null && from > -1) {
                url += `&_from=${from}`;
            }
            if (to != null && to > -1) {
                url += `&_to=${to}`;
            }
            if (simulationBehavior === SimulationBehavior.SKIP) {
                url += `&simulation=false`;
            }
            if (completeSpecifications) {
                url = this.addCompleteSpecifications(url);
            }
            return url;
        };
        this.basePath = ctx.sessionToken
            ? '/proxy/authenticated/catalog'
            : '/proxy/catalog';
        this.searchEncodeURI = search_1.searchEncodeURI(ctx.account);
    }
}
exports.Search = Search;
