"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Suggestions = void 0;
const api_1 = require("@vtex/api");
const request_1 = require("../utils/request");
const routes = {
    sellerSkuId: (sellerId, sellerSkuId) => `/${sellerId}/${sellerSkuId}`,
    versions: (sellerId, sellerSkuId) => `/${sellerId}/${sellerSkuId}/versions`,
    versionById: (sellerId, sellerSkuId, version) => `/${sellerId}/${sellerSkuId}/versions/${version}`,
};
class Suggestions extends api_1.ExternalClient {
    constructor(ctx, options) {
        super(`https://api.vtex.com/${ctx.account}/suggestions/`, ctx, {
            ...options,
        });
    }
    getAllSuggestions(authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'suggestions-getAllSuggestions';
        return this.http.get('', request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    getSuggestionById(sellerId, sellerSkuId, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'suggestions-getSuggestionById';
        return this.http.get(routes.sellerSkuId(sellerId, sellerSkuId), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    sendSkuSuggestion(body, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'suggestions-sendSkuSuggestion';
        const { SellerId: sellerId, SellerStockKeepingUnitId: sellerSkuId } = body;
        return this.http.put(routes.sellerSkuId(sellerId, sellerSkuId), body, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    deleteSkuSuggestion(sellerId, sellerSkuId, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'suggestions-deleteSkuSuggestion';
        return this.http.delete(routes.sellerSkuId(sellerId, sellerSkuId), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    getAllVersions(sellerId, sellerSkuId, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'suggestions-deleteSkuSuggestion';
        return this.http.get(routes.versions(sellerId, sellerSkuId), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    getVersionById(sellerId, sellerSkuId, version, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'suggestions-deleteSkuSuggestion';
        return this.http.get(routes.versionById(sellerId, sellerSkuId, version), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
}
exports.Suggestions = Suggestions;
