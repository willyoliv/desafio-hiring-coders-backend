"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OMS = void 0;
const api_1 = require("@vtex/api");
const request_1 = require("../utils/request");
const baseURL = '/api/oms';
const routes = {
    orders: `${baseURL}/pvt/orders`,
    lastOrder: `${baseURL}/user/orders/last`,
    order: (id) => `${baseURL}/pvt/orders/${id}`,
    notification: (id) => `${baseURL}/pvt/orders/${id}/invoice`,
    cancel: (id) => `${baseURL}/pvt/orders/${id}/cancel`,
};
class OMS extends api_1.JanusClient {
    constructor(ctx, options) {
        super(ctx, {
            ...options,
        });
    }
    listOrders(authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'oms-listOrders';
        return this.http.get(routes.orders, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    userLastOrder(authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'oms-userLastOrder';
        return this.http.get(routes.lastOrder, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    order(id, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'oms-order';
        return this.http.get(routes.order(id), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    orderNotification(id, body, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'oms-orderNotification';
        return this.http.post(routes.notification(id), body, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    cancelOrder(id, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'oms-cancelOrder';
        return this.http.post(routes.cancel(id), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
}
exports.OMS = OMS;
