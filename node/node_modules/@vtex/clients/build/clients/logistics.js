"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logistics = void 0;
const api_1 = require("@vtex/api");
const request_1 = require("../utils/request");
const baseURL = '/api/logistics';
const routes = {
    docks: (dockId) => `${baseURL}/pvt/configuration/docks/${dockId}`,
    shipping: `${baseURL}/pub/shipping/configuration`,
    nearPickupPoints: (lat, long, maxDistance) => `${baseURL}/pvt/configuration/pickuppoints/_search?&page=1&pageSize=100&lat=${lat}&lon=${long}&maxDistance=${maxDistance}`,
    pickUpById: (id) => `${baseURL}/pvt/configuration/pickuppoints/${id}`,
    pickupPoints: `${baseURL}/pvt/configuration/pickuppoints/_search`,
    listInventoryBySku: (skuId) => `${baseURL}/pvt/inventory/skus/${skuId}`,
};
class Logistics extends api_1.JanusClient {
    constructor(ctx, options) {
        super(ctx, {
            ...options,
        });
    }
    getDockById(dockId, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'logistics-getDockById';
        return this.http.get(routes.docks(dockId), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    pickupById(id, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'logistics-pickupById';
        return this.http.get(routes.pickUpById(id), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    listPickupPoints(authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'logistics-listPickupPoints';
        return this.http.get(routes.pickupPoints, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    nearPickupPoints(lat, long, maxDistance = 50, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'logistics-nearPickupPoints';
        return this.http.get(routes.nearPickupPoints(lat, long, maxDistance), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    shipping(authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'logistics-shipping';
        return this.http.get(routes.shipping, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    listInventoryBySku(skuId, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'logistics-listInventoryBySku';
        return this.http.get(routes.listInventoryBySku(skuId), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
}
exports.Logistics = Logistics;
