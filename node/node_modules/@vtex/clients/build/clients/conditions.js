"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Conditions = void 0;
/* eslint-disable max-params */
const api_1 = require("@vtex/api");
const request_1 = require("../utils/request");
class Conditions extends api_1.JanusClient {
    constructor(ctx, options) {
        super(ctx, {
            ...options,
        });
    }
    getAllConditionsPerType(type, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'conditions-getPerType';
        return this.http.get(this.routes.ConditionsByType(this.context.account, type), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    getConditionById(type, id, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'conditions-getById';
        return this.http.get(this.routes.ConditionsById(this.context.account, type, id), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    deleteConditionById(type, id, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'conditions-deleteById';
        return this.http.delete(this.routes.ConditionsById(this.context.account, type, id), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    saveCondition(type, condition, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'conditions-saveCondition';
        const requestMethod = 'conditionId' in condition ? this.http.put : this.http.post;
        return requestMethod(this.routes.ConditionsByType(this.context.account, type), condition, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    doEvaluation(type, subject, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'conditions-doEvaluation';
        return this.http.post(this.routes.ApplyConditions(this.context.account, type), subject, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    get routes() {
        return {
            ApplyConditions: (an, type) => `${this.routes.Conditions(an)}/${type}/evaluate`,
            ConditionsById: (an, type, id) => `${this.routes.ConditionsByType(an, type)}/${id}`,
            ConditionsByType: (an, type) => `${this.routes.Conditions(an)}/${type}/condition`,
            Conditions: (an) => `/${an}/conditions`,
        };
    }
}
exports.Conditions = Conditions;
