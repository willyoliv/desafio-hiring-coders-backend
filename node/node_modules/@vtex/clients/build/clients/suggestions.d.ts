import { ExternalClient, InstanceOptions, IOContext, RequestTracingConfig } from '@vtex/api';
import { AuthMethod } from '../typings/tokens';
import { Suggestion, SuggestionRequest, SuggestionsResponse } from '../typings/suggestions';
export declare class Suggestions extends ExternalClient {
    constructor(ctx: IOContext, options?: InstanceOptions);
    getAllSuggestions(authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<SuggestionsResponse>;
    getSuggestionById(sellerId: string, sellerSkuId: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<Suggestion>;
    sendSkuSuggestion(body: SuggestionRequest, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    deleteSkuSuggestion(sellerId: string, sellerSkuId: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<import("@vtex/api").IOResponse<void>>;
    getAllVersions(sellerId: string, sellerSkuId: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<any>;
    getVersionById(sellerId: string, sellerSkuId: string, version: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<any>;
}
