import type { InstanceOptions, IOContext, RequestTracingConfig } from '@vtex/api';
import { JanusClient } from '@vtex/api';
import type { AuthMethod } from '../typings/tokens';
import type { GetSkuResponse, GetSkuContextResponse, Seller, Category, GetBrandResponse } from '../typings/catalog';
export declare class Catalog extends JanusClient {
    constructor(ctx: IOContext, options?: InstanceOptions);
    getCategoryById(categoryId: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<Category | undefined>;
    getProductsAndSkus(from?: number, to?: number, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<any>;
    getSkuById(skuId: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<GetSkuResponse>;
    getSkuContext(skuId: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<GetSkuContextResponse>;
    changeNotification({ sellerId, sellerSkuId, authMethod, }: ChangeNotificationArgs, tracingConfig?: RequestTracingConfig): Promise<void>;
    createSeller(seller: Seller, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    getSellerList(authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<Seller[]>;
    seller(id: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<Seller>;
    getBrandById(brandId: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<GetBrandResponse>;
}
interface ChangeNotificationArgs {
    sellerId: string;
    sellerSkuId: string;
    authMethod?: AuthMethod;
}
export {};
