{"version":3,"file":"splunk-events.umd.js","sources":["../src/debounce.ts","../src/debounceStrategy.ts","../src/exponentialBackoffStrategy.ts","../src/request.ts","../src/splunk-events.ts"],"sourcesContent":["export interface DebouncedFn {\n  (): void\n  clear(): void\n}\n\nexport default function debounce<T>(\n  func: (...args: T[]) => void | Promise<void>,\n  wait = 100\n): DebouncedFn {\n  let timeout: NodeJS.Timeout | null = null\n  let cancel: (() => void) | null = null\n\n  const debounced = (...args: T[]) => {\n    if (timeout) {\n      clearTimeout(timeout)\n      timeout = null\n    }\n\n    return new Promise<void>((res, rej) => {\n      cancel = rej\n\n      timeout = setTimeout(() => {\n        const maybePromise = func(...args)\n\n        if (maybePromise != null) {\n          maybePromise.then(res).catch(rej)\n        }\n      }, wait)\n    })\n  }\n\n  debounced.clear = () => {\n    if (!timeout) {\n      return\n    }\n\n    clearTimeout(timeout)\n    cancel?.()\n\n    timeout = null\n  }\n\n  return debounced\n}\n","import type { SplunkEvent, Strategy } from './strategy'\nimport type { DebouncedFn } from './debounce'\nimport debounce from './debounce'\n\nconst DEFAULT_DEBOUNCE_TIME = 2_000\n\nexport class DebounceStrategy implements Strategy {\n  private pendingEvents: SplunkEvent[] = []\n  private events: SplunkEvent[] = []\n\n  private isSendingEvents = false\n  private flushPending = false\n\n  private autoRetryFlush: boolean\n  private sendEvents: (events: SplunkEvent[]) => Promise<void>\n\n  public flushEvents: DebouncedFn\n\n  constructor({\n    debounceTime = DEFAULT_DEBOUNCE_TIME,\n    autoRetryFlush,\n    sendEvents,\n  }: {\n    debounceTime?: number\n    autoRetryFlush: boolean\n    sendEvents: (events: SplunkEvent[]) => Promise<void>\n  }) {\n    this.flushEvents = debounce(this.flushImpl, debounceTime)\n    this.autoRetryFlush = autoRetryFlush\n    this.sendEvents = sendEvents\n  }\n\n  public abort() {\n    this.flushEvents.clear()\n  }\n\n  public addEvent(event: SplunkEvent) {\n    this.events.push(event)\n  }\n\n  private flushImpl = () => {\n    if (this.isSendingEvents) {\n      this.flushPending = true\n\n      return\n    }\n\n    this.pendingEvents = Array.from(this.events)\n    this.events = []\n    this.isSendingEvents = true\n\n    this.sendEvents(this.pendingEvents)\n      .then(() => {\n        this.pendingEvents = []\n        this.isSendingEvents = false\n\n        if (!this.flushPending) {\n          return\n        }\n\n        this.flushPending = false\n\n        return this.flushImpl()\n      })\n      .catch(() => {\n        this.events = this.events.concat(this.pendingEvents)\n        this.pendingEvents = []\n        this.isSendingEvents = false\n\n        if (this.autoRetryFlush) {\n          this.flushEvents()\n        }\n      })\n  }\n}\n","import type { Strategy, SplunkEvent } from './strategy'\n\nconst DEFAULT_EXPONENTIAL_BACKOFF_LIMIT = 60_000\n\nexport class ExponentialBackoffStrategy implements Strategy {\n  private isBackoffInProgress = false\n  private maxNumberOfRetries = Infinity\n\n  private events: SplunkEvent[] = []\n  private pendingEvents: SplunkEvent[] = []\n  private exponentialBackoffLimit: number\n\n  private sendEvents: (events: SplunkEvent[]) => Promise<void>\n\n  constructor({\n    sendEvents,\n    exponentialBackoffLimit = DEFAULT_EXPONENTIAL_BACKOFF_LIMIT,\n    maxNumberOfRetries,\n  }: {\n    sendEvents: (events: SplunkEvent[]) => Promise<void>\n    exponentialBackoffLimit?: number\n    maxNumberOfRetries?: number\n  }) {\n    this.sendEvents = sendEvents\n    this.exponentialBackoffLimit = exponentialBackoffLimit\n    this.maxNumberOfRetries = maxNumberOfRetries ?? this.maxNumberOfRetries\n  }\n\n  public addEvent(event: SplunkEvent) {\n    this.events.push(event)\n  }\n\n  public flushEvents(): Promise<void> {\n    if (this.isBackoffInProgress) {\n      return Promise.resolve()\n    }\n\n    this.isBackoffInProgress = true\n\n    const backoffMultiplier = 2\n\n    const executeFlush = (depth = 0): Promise<void> => {\n      this.pendingEvents = this.pendingEvents.concat(this.events)\n\n      this.events = []\n\n      return this.sendEvents(this.pendingEvents)\n        .then(() => {\n          this.pendingEvents = []\n          this.isBackoffInProgress = false\n\n          if (this.events.length > 0) {\n            return this.flushEvents()\n          }\n\n          return Promise.resolve()\n        })\n        .catch(() => {\n          const waitTime = backoffMultiplier ** depth * 1_000\n\n          if (depth > this.maxNumberOfRetries) {\n            this.events = []\n            this.isBackoffInProgress = false\n\n            return\n          }\n\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              executeFlush(depth + 1)\n                .then(resolve, reject)\n                .catch(reject)\n            }, Math.min(waitTime, this.exponentialBackoffLimit))\n          })\n        })\n    }\n\n    return executeFlush()\n  }\n}\n","export interface FetchContext extends Omit<RequestInit, 'body'> {\n  url: string\n  data: BodyInit\n  responseType: string\n}\n\nexport function fetchRequest(context: FetchContext) {\n  if (\n    (typeof window !== 'undefined' && typeof window.fetch !== 'function') ||\n    (typeof global !== 'undefined' &&\n      typeof (global as any).fetch !== 'function')\n  ) {\n    console.log('Error, using fetchRequest without fetch object')\n\n    return Promise.resolve(null)\n  }\n\n  return fetch(context.url, {\n    ...context,\n    body: context.data,\n  }).then((response) => {\n    if (context.responseType === 'json') {\n      return response.json()\n    }\n\n    return response\n  })\n}\n","import { DebounceStrategy } from './debounceStrategy'\nimport { ExponentialBackoffStrategy } from './exponentialBackoffStrategy'\nimport { FetchContext, fetchRequest } from './request'\nimport type { EventData, SplunkEvent, Strategy } from './strategy'\n\nexport { FetchContext }\n\nexport interface Config {\n  /**\n   * Whether or not to automatically flush batched events\n   * after calling {@link SplunkEvent#logEvent}.\n   *\n   * Turned on by default. This option will also be turned\n   * on when using `useExponentialBackoff`, regardless of the\n   * value passed the the configuration.\n   */\n  autoFlush?: boolean\n  /**\n   * Whether or not to automatically retry failed flushes.\n   */\n  autoRetryFlush?: boolean\n  /**\n   * Timeout, in milliseconds, used to batch events together in one single request.\n   */\n  debounceTime?: number\n  /**\n   * Wether or not to enable debugging of the {@link SplunkEvent} class\n   * itself.\n   */\n  debug?: boolean\n  /**\n   * Endpoint of your Splunk server.\n   */\n  endpoint: string\n  /**\n   * Host of your Splunk server.\n   */\n  host?: string\n  /**\n   * Whether or not to inject additional information about the user's\n   * device and browser in the Splunk event.\n   */\n  injectAdditionalInfo?: boolean\n  /**\n   * @deprecated Use `injectAdditionalInfo` instead\n   */\n  injectAditionalInfo?: boolean\n  /**\n   * Whether or not to automatically add the timestamp to the Splunk event.\n   */\n  injectTimestamp?: boolean\n  /**\n   * Path of the Splunk server endpoint.\n   */\n  path?: string\n  /**\n   * Custom request function to use in environments where {@link window.fetch}\n   * is not available.\n   */\n  request?: (fetchContext: FetchContext) => Promise<Response>\n  /**\n   * Whether or not to parse the event data in {@link SplunkEvent#logEvent}.\n   */\n  shouldParseEventData?: boolean\n  /**\n   * Source of the Splunk event.\n   */\n  source?: string\n  /**\n   * Token used to authenticate with the Splunk server.\n   */\n  token: string\n  /**\n   * Custom headers to be added in the request\n   */\n  headers?: HeadersInit\n  /**\n   * Configures the {@link SplunkEvent#flush} method to use an\n   * exponential backoff algorithm instead of a fixed debounce time.\n   *\n   * Turned off by default.\n   */\n  useExponentialBackoff?: boolean\n  /**\n   * Maximum time, in milliseconds, to use for the exponential backoff\n   * algorithm.\n   *\n   * The default limit is 60_000 milliseconds.\n   */\n  exponentialBackoffLimit?: number\n  /**\n   * Maximum number of retries of failed requests before dropping the events.\n   */\n  maxNumberOfRetries?: number\n}\n\nconst DEFAULT_USE_EXPONENTIAL_BACKOFF = false\n\nexport default class SplunkEvents {\n  private _requestImpl: (\n    fetchContext: FetchContext\n  ) => Promise<Response | null> = fetchRequest\n\n  private autoFlush = true\n  private debug = false\n  private endpoint?: string\n  private headers?: HeadersInit\n  private host = '-'\n  private injectAdditionalInfo = false\n  private injectTimestamp = false\n  private path = '/services/collector/event'\n  private shouldParseEventData = true\n  private source = 'log'\n  private token?: string\n\n  private configured = false\n\n  private flushStrategy: Strategy | null = null\n\n  constructor(config?: Config) {\n    if (!config) {\n      return\n    }\n\n    this.config(config)\n  }\n\n  /**\n   * Configure this Splunk Event instance.\n   */\n  public config(config: Partial<Config>) {\n    if (this.configured) {\n      return\n    }\n\n    this.configured = true\n\n    this.endpoint = config?.endpoint ?? this.endpoint // required\n    this.token = config?.token ?? this.endpoint // required\n    this.injectAdditionalInfo =\n      config?.injectAditionalInfo ??\n      config?.injectAdditionalInfo ??\n      this.injectAdditionalInfo\n\n    this.autoFlush = config?.autoFlush ?? this.autoFlush\n\n    this.source = config?.source ?? this.source\n    this.path = config?.path ?? this.path\n    this.host = config?.host ?? this.host\n    this.debug = config?.debug ?? this.debug\n\n    this._requestImpl = config?.request ?? this._requestImpl\n\n    this.injectTimestamp = config?.injectTimestamp ?? this.injectTimestamp\n    this.shouldParseEventData =\n      config?.shouldParseEventData ?? this.shouldParseEventData\n\n    this.headers = {\n      Authorization: `Splunk ${this.token}`,\n      'Content-Type': 'application/json',\n      ...(config?.headers ?? {}),\n    }\n\n    const useExponentialBackoff =\n      config?.useExponentialBackoff ?? DEFAULT_USE_EXPONENTIAL_BACKOFF\n\n    // Exponential backoff configurations\n    const exponentialBackoffLimit = config?.exponentialBackoffLimit\n    const maxNumberOfRetries = config?.maxNumberOfRetries\n\n    // Debounce configurations\n    const debounceTime = config?.debounceTime\n    const autoRetryFlush = config?.autoRetryFlush ?? true\n\n    if (useExponentialBackoff) {\n      this.autoFlush = true\n\n      this.flushStrategy = new ExponentialBackoffStrategy({\n        sendEvents: this.flush,\n        exponentialBackoffLimit,\n        maxNumberOfRetries,\n      })\n    } else {\n      this.flushStrategy = new DebounceStrategy({\n        sendEvents: this.flush,\n        debounceTime,\n        autoRetryFlush,\n      })\n    }\n  }\n\n  /**\n   * Logs an event to Splunk.\n   *\n   * This method will send the data to the Splunk endpoint configured\n   * in the {@link SplunkEvent#config} method. For now, you can only\n   * send primitive types such as string, numbers and booleans in the\n   * event data object.\n   *\n   * @argument level Level of criticity of this log, use values such as\n   * \"Critical\", \"Important\" or \"Debug\"\n   * @argument type Type of this log, use values such as \"Error\", \"Warn\"\n   * or \"Info\"\n   * @argument workflowType Type of this \"workflow\", you can use something\n   * related to your application domain, such as \"checkout\" for events happening\n   * in the Checkout page.\n   * @argument workflowInstance A more fine-grained level of information\n   * regarding the workflow, use values such as \"checkout-cart\" for events\n   * that happened in the Cart page of Checkout for example.\n   * @argument eventData Any custom event data you may find useful to log\n   * together that can provide more information.\n   * @argument account In multi-tenant environment it can be useful to know\n   * the exact account this event is happening in.\n   */\n  public logEvent = (\n    level: string,\n    type: string,\n    workflowType: string,\n    workflowInstance: string,\n    eventData?: EventData | null,\n    account = ''\n  ) => {\n    if (this.flushStrategy == null) {\n      throw new Error('SplunkEvents instance is not configured properly')\n    }\n\n    this.validateEvent(eventData)\n\n    const eventObj = {\n      level,\n      type,\n      workflowType,\n      workflowInstance,\n      account,\n      ...eventData,\n      ...(this.injectAdditionalInfo ? this.getAdditionalInfo() : {}),\n    }\n\n    const event = this.shouldParseEventData\n      ? this.parseEventData(eventObj)\n      : eventObj\n\n    const data = {\n      sourcetype: this.source,\n      host: this.host,\n      ...(this.injectTimestamp && { time: +new Date() }),\n      event,\n    }\n\n    this.flushStrategy.addEvent(data)\n\n    if (this.autoFlush) {\n      this.flushStrategy.flushEvents()\n    }\n  }\n\n  /**\n   * Exposes the implementation for the request function\n   * used to send the events to the Splunk API.\n   */\n  public request(fetchContext: FetchContext) {\n    return this._requestImpl(fetchContext)\n  }\n\n  private parseEventData(event: EventData) {\n    let parsedEvent = ''\n\n    for (const key in event) {\n      if (\n        Object.prototype.hasOwnProperty.call(event, key) &&\n        event[key] != null\n      ) {\n        const value = event[key]\n\n        switch (typeof value) {\n          case 'string':\n            parsedEvent += `${key}=\"${value.replace(/\"/g, '')}\" `\n            break\n\n          case 'boolean':\n\n          // eslint-disable-next-line no-fallthrough\n          case 'number':\n            parsedEvent += `${key}=${value} `\n            break\n\n          default:\n            throw new Error('Event property must be string, number or boolean')\n        }\n      }\n    }\n\n    return parsedEvent\n  }\n\n  private validateEvent(event?: EventData | null): asserts event is EventData {\n    if (event === null) {\n      throw new Error('Event must not be null')\n    }\n\n    if (event === undefined) {\n      throw new Error('Event must not be undefined')\n    }\n\n    if (typeof event !== 'object') {\n      throw new Error('Event must be an object')\n    }\n  }\n\n  public getAdditionalInfo() {\n    if (typeof navigator === 'undefined' || typeof window === 'undefined') {\n      return ''\n    }\n\n    const { screen, location } = window\n\n    const additionalInfo =\n      `${navigator.userAgent.replace(/,/g, ';')},` +\n      `${(navigator as any).browserLanguage || navigator.language},` +\n      `${navigator.platform},${screen.availWidth || '-'},${\n        screen.availHeight || '-'\n      },${location.hostname},` +\n      `${location.pathname},${location.protocol.replace(':', '')},${\n        location.hash || '-'\n      }`\n\n    return {\n      additional_info: additionalInfo,\n    }\n  }\n\n  /**\n   * Flushes pending events into one single request.\n   *\n   * You won't need to use this function unless you configured\n   * this instance to not auto flush the events.\n   */\n  public flush = async (events?: SplunkEvent[]): Promise<void> => {\n    this.validateConfig()\n\n    if (!events) {\n      this.flushStrategy!.flushEvents()\n\n      return\n    }\n\n    if (events.length === 0) {\n      return\n    }\n\n    if (this.debug) {\n      console.log(`sending ${events.length} events to splunk`)\n    }\n\n    const splunkBatchedFormattedEvents = this.formatEventsForSplunkBatch(events)\n\n    return this.request({\n      url: `${this.endpoint}${this.path}`,\n      method: 'POST',\n      data: splunkBatchedFormattedEvents,\n      headers: this.headers ?? {},\n      responseType: 'json',\n    })\n      .then(() => {\n        if (this.debug) {\n          console.log(`${events.length} events successfuly sent to splunk`)\n        }\n      })\n      .catch((e) => {\n        if (this.debug) {\n          console.warn('Error sending events to splunk.', e)\n        }\n\n        throw e\n      })\n  }\n\n  private formatEventsForSplunkBatch(events: SplunkEvent[]) {\n    return events.map((event) => JSON.stringify(event)).join('\\n')\n  }\n\n  private validateConfig() {\n    if (this.token == null) {\n      throw new Error('Token must not be null nor undefined')\n    }\n\n    if (this.endpoint == null) {\n      throw new Error('Endpoint must not be null nor undefined')\n    }\n\n    if (this.flushStrategy == null) {\n      throw new Error(\n        'Instance must be configured (either by constructor or calling config method) before flushing events'\n      )\n    }\n  }\n}\n"],"names":[],"mappings":"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"}